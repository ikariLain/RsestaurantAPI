// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestaurantAPI.Data;

#nullable disable

namespace RestaurantAPI.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20250909181334_FixStaticSeedData")]
    partial class FixStaticSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RestaurantAPI.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Email = "alice@example.com",
                            Name = "Alice Johnson",
                            PhoneNumber = "0701234567"
                        },
                        new
                        {
                            CustomerId = 2,
                            Email = "bob@example.com",
                            Name = "Bob Smith",
                            PhoneNumber = "0709876543"
                        });
                });

            modelBuilder.Entity("RestaurantAPI.Models.Food", b =>
                {
                    b.Property<int>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPopular")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVegetarian")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("FoodId");

                    b.ToTable("Foods");

                    b.HasData(
                        new
                        {
                            FoodId = 1,
                            Description = "Classic cheese pizza",
                            ImageUrl = "pizza.jpg",
                            IsAvailable = true,
                            IsPopular = true,
                            IsVegetarian = true,
                            Name = "Margherita Pizza",
                            Price = 89.0
                        },
                        new
                        {
                            FoodId = 2,
                            Description = "Beef burger with cheese",
                            ImageUrl = "burger.jpg",
                            IsAvailable = true,
                            IsPopular = true,
                            IsVegetarian = false,
                            Name = "Cheeseburger",
                            Price = 120.0
                        },
                        new
                        {
                            FoodId = 3,
                            Description = "Fresh salad with chicken and dressing",
                            ImageUrl = "salad.jpg",
                            IsAvailable = true,
                            IsPopular = false,
                            IsVegetarian = false,
                            Name = "Caesar Salad",
                            Price = 75.0
                        });
                });

            modelBuilder.Entity("RestaurantAPI.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<int>("AmountOfGuests")
                        .HasColumnType("int");

                    b.Property<int>("AmountOfTables")
                        .HasColumnType("int");

                    b.Property<DateOnly>("BookingDate")
                        .HasColumnType("date");

                    b.Property<int>("Customer_FK")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReservationId");

                    b.HasIndex("Customer_FK");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            ReservationId = 1,
                            AmountOfGuests = 2,
                            AmountOfTables = 1,
                            BookingDate = new DateOnly(2025, 9, 15),
                            Customer_FK = 1,
                            Duration = new TimeSpan(0, 2, 0, 0, 0),
                            StartTime = new DateTime(2025, 9, 15, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "Confirmed"
                        });
                });

            modelBuilder.Entity("RestaurantAPI.Models.ServiceOrder", b =>
                {
                    b.Property<int>("ServiceOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceOrderId"));

                    b.Property<int>("FoodId_FK")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Reservation_FK")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPriceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ServiceOrderId");

                    b.HasIndex("FoodId_FK");

                    b.HasIndex("Reservation_FK");

                    b.ToTable("ServiceOrder");

                    b.HasData(
                        new
                        {
                            ServiceOrderId = 1,
                            FoodId_FK = 1,
                            Note = "Extra cheese",
                            Quantity = 2,
                            Reservation_FK = 1,
                            TotalPriceAmount = 178m
                        });
                });

            modelBuilder.Entity("RestaurantAPI.Models.Table", b =>
                {
                    b.Property<int>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TableId"));

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("SeatAmount")
                        .HasColumnType("int");

                    b.HasKey("TableId");

                    b.HasIndex("ReservationId");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            TableId = 1,
                            IsAvailable = true,
                            SeatAmount = 2
                        },
                        new
                        {
                            TableId = 2,
                            IsAvailable = true,
                            SeatAmount = 4
                        },
                        new
                        {
                            TableId = 3,
                            IsAvailable = false,
                            SeatAmount = 6
                        });
                });

            modelBuilder.Entity("RestaurantAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin@restaurant.com",
                            FirstName = "Admin",
                            LastName = "User",
                            PasswordHash = "hashedpassword123",
                            Role = "Admin"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "john@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PasswordHash = "hashedpassword456",
                            Role = "Customer"
                        });
                });

            modelBuilder.Entity("RestaurantAPI.Models.Reservation", b =>
                {
                    b.HasOne("RestaurantAPI.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("Customer_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RestaurantAPI.Models.ServiceOrder", b =>
                {
                    b.HasOne("RestaurantAPI.Models.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantAPI.Models.Reservation", "Reservation")
                        .WithMany("ServiceOrders")
                        .HasForeignKey("Reservation_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("RestaurantAPI.Models.Table", b =>
                {
                    b.HasOne("RestaurantAPI.Models.Reservation", null)
                        .WithMany("Tables")
                        .HasForeignKey("ReservationId");
                });

            modelBuilder.Entity("RestaurantAPI.Models.Reservation", b =>
                {
                    b.Navigation("ServiceOrders");

                    b.Navigation("Tables");
                });
#pragma warning restore 612, 618
        }
    }
}
